---
- name: Ansible playbook to deploy RHEM on Image Mode
  hosts: localhost
  gather_facts: yes
  vars_files:
  - vars/main.yaml
  tasks:
  - name: Install Epel
    ansible.builtin.shell: |
      dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
  
  - name: Install required packages
    ansible.builtin.package:
      name:
      - certbot
      - python3-certbot-dns-route53
      state: present

  - name: Ensure AWS credentials directory exists
    ansible.builtin.file:
      path: /root/.aws
      state: directory
      owner: root
      group: root
      mode: '0700'
  
  - name: Write AWS credentials for certbot
    ansible.builtin.copy:
      dest: /root/.aws/credentials
      content: |
        [default]
        aws_access_key_id={{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
        aws_secret_access_key={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}
      owner: root
      group: root
      mode: '0600'

  - name: Generate a certificate
    ansible.builtin.command: >
      certbot certonly --non-interactive --agree-tos
      --email {{ email }}
      --dns-route53
      -d {{ domain_name }}
    args:
      creates: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"

  - name: Show certificate location
    ansible.builtin.debug:
      msg: "Certificate installed at /etc/letsencrypt/live/{{ domain_name }}/"
  
  - name: load secrets 
    ansible.builtin.include_vars:
      file: "./vars/secrets.yml"
  
  - name: Add the SSH key if doesn't exist
    amazon.aws.ec2_key:
      name: "{{ key_name }}"
      key_material: "{{ lookup('file', '~/.ssh/{{ key_name }}.pub') }}"
      state: present

  - name: Launch ec2 instance
    amazon.aws.ec2_instance:
      name: "{{ instance_name }}"
      instance_type: "{{ instance_type }}"
      key_name: "{{ key_name }}"
      image_id: "{{ ami }}"
      subnet_id: "{{ subnet_id }}"
      security_group: "{{ security_group_id }}"
      volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: "{{ storage }}"
          volume_type: gp3
      network_interfaces:
      - assign_public_ip: true
      wait: true
      count: 1
      user_data: "{{ lookup('ansible.builtin.template', './templates/user-data.yaml.j2') }}"
      tags:
        Name: "{{ instance_name }}"
    register: ec2_instance

  - name: Print public dns
    ansible.builtin.debug:
      var: ec2_instance.instances[0].public_dns_name